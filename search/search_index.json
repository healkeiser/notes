{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#notes","title":"Notes","text":"<p>This documentation is built with MkDocs and the MkDocs Publisher plugin, since I'm using Obsidian to take the notes. You can clone the repository and open it as an Obsidian Vault if you prefer reading it locally!</p> <p>Warning</p> <p>Some stuff might get displayed incorrectly in Obsidian, such as HTML tags.</p> <p>Warning</p> <p>You might notice a lot of <code>README.md</code> files, please ignore those - they're here to indicate attributes on directories for MkDocs Publisher.</p> <p>Note</p> <p>If you spot any issue or have any recommendations, don't hesitate to send me an email.</p>"},{"location":"softwares/houdini/usd/plugins/custom-schemas/","title":"Custom Schemas","text":"<p>How-to create a USD custom schema.</p> <p>Important Links</p> <ul> <li> <p>https://lucascheller.github.io/VFX-UsdSurvivalGuide/core/plugins/schemas.html</p> </li> <li> <p>https://openusd.org/release/tut_generating_new_schema.html</p> </li> </ul> <p>Note</p> <p>You can find the usdFxquinox plugin on GitHub.</p> <p>The easiest way to create a custom schema is to create what\u2019s called a codeless schema (uncompiled version). This will create a new schema but won\u2019t provide the C++/Python bindings from the freshly created schema class.</p>"},{"location":"softwares/houdini/usd/plugins/custom-schemas/#directory-structure","title":"Directory Structure","text":"<p>Let\u2019s start by creating a directory and a <code>schema.usda</code> file:</p> <pre><code>.\n\u2514\u2500\u2500 \ud83d\udcc1 usdFxquinox/\n    \u251c\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc4 schema.usda\n</code></pre> <p>Which corresponds to:</p> <pre><code>.\n\u2514\u2500\u2500 \ud83d\udcc1 &lt;plugin name&gt;/\n    \u251c\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc4 schema.usda\n</code></pre>"},{"location":"softwares/houdini/usd/plugins/custom-schemas/#edit-schemausda","title":"Edit <code>schema.usda</code>","text":"<p>Let\u2019s now edit our <code>schema.usda</code> file. This will contain the IsA schemas or API schemas you want to create.</p> <pre><code>#usda 1.0\n(\n    subLayers = [\n        @usd/schema.usda@\n    ]\n)\n\nover \"GLOBAL\" (\n    customData = {\n        string libraryName       = \"usdFxquinox\"\n        string libraryPath       = \".\"\n        string libraryPrefix     = \"usdFxquinox\"\n        bool skipCodeGeneration = true\n    }\n)\n{\n}\n\nclass FxquinoxContextInfo \"FxquinoxContextInfo\" (\n    doc = \"\"\"Holder for fxquinox-specific context information.\"\"\"\n    inherits = &lt;/Typed&gt;\n    customData = {\n        string className = \"FxquinoxContextInfo\"\n        }\n    )\n{\n    string fxquinox:project (\n        doc = \"\"\"The project name.\"\"\"\n    )\n\n    asset fxquinox:projectRoot (\n        doc = \"\"\"The project root path.\"\"\"\n    )\n\n    string fxquinox:entity (\n        doc = \"\"\"The current context entity (asset or shot).\"\"\"\n    )\n\n    string fxquinox:assetType (\n        doc = \"\"\"If the entity is an asset, the type of asset.\"\"\"\n    )\n\n    string fxquinox:asset (\n        doc = \"\"\"If the entity is an asset, the asset.\"\"\"\n    )\n\n    string fxquinox:sequence (\n        doc = \"\"\"If the entity is a shot, the sequence.\"\"\"\n    )\n\n    string fxquinox:shot (\n        doc = \"\"\"If the entity is a shot, the shot.\"\"\"\n    )\n\n    string fxquinox:step (\n        doc = \"\"\"The context pipeline step.\"\"\"\n    )\n\n    string fxquinox:task (\n        doc = \"\"\"The context pipeline task.\"\"\"\n    )\n\n    string fxquinox:user (\n        doc = \"\"\"The current username.\"\"\"\n    )\n\n    string fxquinox:hostname (\n        doc = \"\"\"The current hostname (machine name).\"\"\"\n    )\n}\n</code></pre>"},{"location":"softwares/houdini/usd/plugins/custom-schemas/#run-usdgenschema","title":"Run usdGenSchema","text":"<p>Once you\u2019re happy with your new schema, we now need to run usdGenSchema. The easiest way is to run the one shipping with your DCC compiled USD.</p> <p>I made this batch script to run it on Windows:</p> <pre><code>@echo off\n\nREM Set paths to Houdini programs, and the USD file\nset HOUDINI_VERSION=20.0.547\nset USD_PLUGIN_NAME=usdFxquinox\nset HYTHON_PATH=\"C:\\Program Files\\Side Effects Software\\Houdini %HOUDINI_VERSION%\\bin\\hython.exe\"\nset USDGENSCHEMA_PATH=\"C:\\Program Files\\Side Effects Software\\Houdini %HOUDINI_VERSION%\\bin\\usdGenSchema\"\nset SCHEMA_PATH=%~dp0resources\\schema.usda\nset DESTINATION_PATH=%~dp0\n\necho Running usdGenSchema for %USD_PLUGIN_NAME%:\necho           Hython: %HYTHON_PATH%\necho       USD plugin: %USD_PLUGIN_NAME%\necho     UsdGenSchema: %USDGENSCHEMA_PATH%\necho           Schema: %SCHEMA_PATH%\necho             Dest: %DESTINATION_PATH%\necho.\n\nREM Run the command `hython usdGenSchema 'path/to/schema.usda' 'destination/path'`\n%HYTHON_PATH% %USDGENSCHEMA_PATH% %SCHEMA_PATH% %DESTINATION_PATH%\n\npause\n</code></pre> <p>Note</p> <p>Think about changing your <code>HOUDINI_VERSION</code> and <code>USD_PLUGIN_NAME</code> accordingly.</p> <p>Warning</p> <p><code>%~dp0</code> is the Batch variable that expands to the current directory. Only use it if your .bat file is placed under the resources folder!</p> <p>Let the tool run. Once it\u2019s done, you should have 2 new files:</p> <pre><code>.\n\u2514\u2500\u2500 \ud83d\udcc1 usdFxquinox/\n    \u251c\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc4 schema.usda\n    \u251c\u2500\u2500 \ud83d\udcc4 generatedSchema.usda  \ud83d\udfe2\n    \u2514\u2500\u2500 \ud83d\udcc4 plugInfo.json         \ud83d\udfe2\n</code></pre> <p>You\u2019ll need to modify the <code>plugInfo.json</code> file, since usdGenSchema leaves in the cmake <code>@...@</code> string replacements:</p> <pre><code>...\n    \"LibraryPath\": \"@PLUG_INFO_LIBRARY_PATH@\",\n    \"Name\": \"usdFxquinox\",\n    \"ResourcePath\": \"@PLUG_INFO_RESOURCE_PATH@\",\n    \"Root\": \"@PLUG_INFO_ROOT@\",\n    \"Type\": \"resource\"\n...\n</code></pre> <p>To:</p> <pre><code>...\n    \"LibraryPath\": \"\",\n    \"Name\": \"usdFxquinox\",\n    \"ResourcePath\": \".\",\n    \"Root\": \".\",\n    \"Type\": \"resource\"\n...\n</code></pre> <p>This change only need to be made once, as indicated in <code>plugInfo.json</code>:</p> <pre><code># Edits will survive regeneration except for comments and\n# changes to types with autoGenerated=true.\n</code></pre>"},{"location":"softwares/houdini/usd/plugins/custom-schemas/#edit-environment","title":"Edit Environment","text":"<p>The last step is to add the folder containing <code>plugInfo.json</code> to the <code>PXR_PLUGINPATH_NAME</code> environment variable. In our instance:</p> <pre><code>set PXR_PLUGINPATH_NAME=%SERVER_ROOT%/Projects/Code/fxquinox/plugins/usd/usdFxquinox;%PXR_PLUGINPATH_NAME%\n</code></pre>"},{"location":"softwares/houdini/usd/plugins/custom-schemas/#custom-icons","title":"Custom Icons","text":"<p>You can add an icon in the <code>$HOUDINI_PATH</code> following this naming convention: <code>SCENEGRAPH_primtype_&lt;custom schema class&gt;.svg</code>, E.g. <code>SCENEGRAPH_primtype_fxquinoxcontextinfo.svg</code>  to be applied inside the Houdini Scene Graph Tree every time you apply your custom schema to a primitive. </p>"},{"location":"softwares/houdini/usd/plugins/integrate-custom-schemas/","title":"Integrate Custom Schemas","text":"<p>How to integrate a custom USD schema like a native Houdini primitive node.</p> <p>Note</p> <p>You can find the Fxquinox Context Info HDA on GitHub.</p>"},{"location":"softwares/houdini/usd/plugins/integrate-custom-schemas/#native-node","title":"Native Node","text":"<p>Let\u2019s take a look at the native Render Settings primitive node:</p> <p></p> <p>It contains a couple of important elements:</p> <ul> <li>A frame range sampling (useful to get rid of time dependencies)</li> <li>The Action menu, to either Create or Edit the primitive</li> <li>The Initialize Parameters init menu, which lets you batch control the USD parms or retrieve another primitive attribute values (if in Edit mode)</li> <li>The Create Primitives menu, which allows you to control how and where the primitive will be created (if in Create mode)</li> </ul>"},{"location":"softwares/houdini/usd/plugins/integrate-custom-schemas/#custom-node-hda","title":"Custom Node (HDA)","text":"<p>In order to emulate all those, we can create an HDA with the following structure:</p> <p>Primitive Path is a locked parameter: You might want to add an OnCreated callback to lock it (or make invisible) in order to force artists to only use pipeline defined primitive paths.</p> <p></p> <p></p>"},{"location":"softwares/houdini/usd/plugins/integrate-custom-schemas/#internal-nodes","title":"Internal Nodes","text":""},{"location":"softwares/houdini/usd/plugins/integrate-custom-schemas/#error","title":"Error","text":"<p>The error node contains the following code:</p> <pre><code>node = hou.pwd()\ninputs = node.inputs()\n\nif inputs and node.parent().parm(\"createprims\").eval() == 1:\n    prim = node.evalParm(\"../primpattern\")\n    stage = inputs[0].stage()\n    return int(stage.GetPrimAtPath(prim).IsValid())\n\nreturn 0\n</code></pre> <p>And will return this error to the user:</p> <p>An existing <code>chs(\"hda_label\")</code> prim has been found at <code>chs(\"../primpattern\")</code>. You can only have one in your current scene. For selective edits, use a <code>chs(\"hda_label\")</code> Edit instead.</p> <p>Where <code>hda_label</code> is a spare parameter with the value <code>Fxquinox Context Info</code>.</p> <p>The error gets displayed only if another primitive with the same path is found, and you\u2019re about to override it by creating a new one on the same path.</p> <p>You can set the message verbosity (error, warning, info) directly onto the node. In specific this instance, we don\u2019t want to allow the creation of multiple Fxqionox Context Info primitives, so it\u2019s set on error, which will effectively set the HDA in an error-state and fail its cooking.</p>"},{"location":"softwares/houdini/usd/plugins/integrate-custom-schemas/#primitive","title":"Primitive","text":"<p>This is the node that creates the primitive itself. On this node you\u2019ll choose the primitive type, primitive kind, parent primitive type (if applicable) and primitive specifier.</p> <p>To apply your custom schema, select Primitive Type to your schema class. In this instance, FxquinoxContextInfo.</p> <p>This node is also tied to the Action menu. If the mode is set to Create, it will enable the node, effectively creating a new primitive. Is it is set to Edit of Force Edit it will not create the primitive and bypass the node, immediately cooking the Edit Properties from Node. Here\u2019s the Python expression driving it, set on this node Activation parameter (You can create it through Right-click &gt; LOP Action &gt; Create Activation Parameter):</p> <pre><code>create_prims = hou.pwd().parent().parm(\"createprims\").eval() \nreturn 0 if create_prims in (0, 2) else 1\n</code></pre>"},{"location":"softwares/houdini/usd/plugins/integrate-custom-schemas/#edit-properties-from-node","title":"Edit Properties from Node","text":"<p>This node is where the magic happens. It\u2019s pretty much the same as the Edit Properties node, with a nice change:</p> <p>Instead of adding spare parameters to this node, you must direct it to another node from which it reads parameters that correspond to attributes on prims in the scene graph tree. When you edit these parameters on the other node, this node authors equivalent changes to the equivalent USD attributes.</p> <p>That allows us to add the properties on the HDA itself: they will always be read from this parent HDA and added accordingly.</p> <p>This node is also linked to the frame range sampling, Action menu, the Initialize Parameters init menu. It\u2019s the one that allows us to switch from Create to Edit just like a native node!</p>"},{"location":"softwares/houdini/usd/plugins/integrate-custom-schemas/#create-usd-attributes","title":"Create USD Attributes","text":"<p>In order for the Edit Properties from Node node to work, we need to bring the USD schema attributes to the HDA interface. With a custom schema, this gets very easy. Open the HDA Type Properties, and inside the Parameters tab navigate to the From USD tab. You can now filter the schema you want and add all its attributes to your parameters.</p> <p></p> <p>They will be automatically read by the Edit Properties from Node node!</p>"},{"location":"softwares/houdini/usd/plugins/integrate-custom-schemas/#add-an-alias","title":"Add an Alias","text":"<p>On most of the native nodes, you\u2019ll get two options: the node, and the node edit.</p> <p></p> <p>Under the hood, this is a simple tool alias, which sets the Action menu to Edit, and runs <code>loputils.setAllControlParameters(node, 'none')</code> to set all USD parameters to None.</p> <p>Here\u2019s how it\u2019s done for Render Settings:</p> <p></p> <p></p> <p>On our custom HDA, we can click on Create New and copy-paste the values of Render Settings in the Options tab. For the Script tab, we need some adjustments:</p> <pre><code>import loptoolutils, loputils\n\nnode = loptoolutils.genericTool(kwargs, '$HDA_NAME', '$HDA_NAME'.split(\"::\")[1] + '_edit1')\nnode.parm('createprims').set('off')\nnode.parm('primpattern').lock(False)\nloputils.setAllControlParameters(node, 'none')\n</code></pre> <p>As you can see, we need to split the name: <code>$HDA_NAME</code> will return <code>jf::jfcontextinfo</code>, and <code>:</code> is an unauthorized character for a Houdini node name. We simply isolate the second name component, and add the <code>edit_1</code> part to it.</p> <p></p> <p></p> <p>You can now try to drop the node, and should be welcomed by your HDA and its Edit variant:</p> <p></p> <p>That\u2019s about it!</p>"}]}